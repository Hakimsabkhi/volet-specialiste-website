---
import { Icon } from 'astro-icon/components';
import CTA from '~/components/ui/CTA.astro';
import HeadlineBDP from '~/components/ui/HeadlineBDP.astro';
import WidgetWrapper from '~/components/ui/WidgetWrapper.astro';
import type { Pricing } from '~/types';
import Image from '~/components/common/Image.astro';

const {
  title = '',
  subtitle = '',
  tagline = '',
  prices = [],
  image = await Astro.slots.render('image'),
  id,
  isDark = false,
  classes = {},
  bg = await Astro.slots.render('bg'),
} = Astro.props;
---

<WidgetWrapper id={id} isDark={isDark} containerClass={`max-w-7xl mx-auto ${classes?.container ?? ''}`} bg={bg}>
  <HeadlineBDP title={title} subtitle={subtitle} tagline={tagline} />
  <div class="flex items-stretch justify-center">
    <div class="max-w-xs md:max-w-full grid grid-cols-1 gap-8 md:grid-cols-3 md:gap-2 md:mx-0">
      {
        prices &&
          prices.map(({ title, subtitle, price, period, items, callToAction, hasRibbon = false, ribbonTitle }) => (
            <div class="col-span-3 mx-auto flex w-full md:col-span-1">
              {price && period && (
                <div class="rounded-lg backdrop-blur border border-gray-200 bg-white shadow pb-2 flex w-full max-w-sm flex-col justify-between text-center">
                  {hasRibbon && ribbonTitle && (
                    <div class="absolute right-[-5px] rtl:right-auto rtl:left-[-5px] top-[-5px] z-[1] h-[100px] w-[100px] overflow-hidden text-right">
                      <span class="absolute top-[19px] right-[-21px] rtl:right-auto rtl:left-[-21px] block w-full rotate-45 rtl:-rotate-45 bg-green-700 text-center text-[10px] font-bold uppercase leading-5 text-white shadow-[0_3px_10px_-5px_rgba(0,0,0,0.3)] before:absolute before:left-0 before:top-full before:z-[-1] before:border-[3px] before:border-r-transparent before:border-b-transparent before:border-l-green-800 before:border-t-green-800 before:content-[''] after:absolute after:right-0 after:top-full after:z-[-1] after:border-[3px] after:border-l-transparent after:border-b-transparent after:border-r-green-800 after:border-t-green-800 after:content-['']">
                        {ribbonTitle}
                      </span>
                    </div>
                  )}

                  <div class="pb-4">
                    {title && (
                      <h3 class="text-center text-base font-bold uppercase leading-6 tracking-wide p-2">{title}</h3>
                    )}
                    {subtitle && <p class="font-light sm:text-lg text-gray-600 ">{subtitle}</p>}
                    <div>
                      {image && (
                        <div class="m-auto max-w-5xl">
                          {typeof image === 'string' ? (
                            <Fragment set:html={image} />
                          ) : (
                            <Image
                              class="items-center w-full bg-gray-500"
                              widths={[400, 768, 1024, 2040]}
                              sizes="(max-width: 767px) 400px, (max-width: 1023px) 768px, (max-width: 2039px) 1024px, 2040px"
                              loading="lazy"
                              width={350}
                              height={100}
                              {...image}
                            />
                          )}
                        </div>
                      )}
                    </div>
                    <div class="my-2">
                      <span class="text-base leading-6 text-gray-600 ">{period}</span>
                      <div class="flex items-center justify-center text-center mb-1">
                        <span class="text-4xl font-extrabold">{price}</span>
                        <span class="ml-2 font-bold text-sm">â‚¬ TTC</span>
                      </div>
                    </div>

                    {items && (
                      <ul role="list" class="m-2  md:my-2 space-y-2 text-left">
                        {items.map(
                          ({ description, icon }) =>
                            description && (
                              <li class="mb-1.5 flex text-sm items-start space-x-3 leading-2 text-center">
                                <span>{description}</span>
                              </li>
                            )
                        )}
                      </ul>
                    )}
                  </div>
                  {callToAction && (
                    <div class={`mx-4 flex justify-center btn ${'btn-primary'}`}>
                      {typeof callToAction === 'string' ? (
                        <Fragment set:html={callToAction} />
                      ) : (
                        callToAction && callToAction.text && callToAction.href && <CTA callToAction={callToAction} />
                      )}
                    </div>
                  )}
                </div>
              )}
            </div>
          ))
      }
    </div>
  </div>
</WidgetWrapper>
