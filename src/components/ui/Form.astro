---
import { Form } from '~/types';

const { inputs, textarea, disclaimer, button = 'Envoyer', description = '' } = Astro.props as Form;
---

<form action="https://api.web3forms.com/submit" method="POST" id="form" class="needs-validation" novalidate>
  <input type="hidden" name="access_key" value="9dc3fdae-4f70-4220-adfa-2f70ddc15def" />
  <input type="checkbox" class="hidden" style="display:none" name="botcheck" />
  {
    inputs &&
      inputs.map(
        ({ type = 'text', name, label = '', autocomplete = 'on', placeholder = '' }) =>
          name && (
            <div class="mb-6">
              {label && (
                <label for={name} class="block text-sm font-medium">
                  {label}
                </label>
              )}
              <input
                type={type}
                name={name}
                id={name}
                autocomplete={autocomplete}
                placeholder={placeholder}
                required
                class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200  bg-white "
              />
            </div>
          )
      )
  }

  {
    textarea && (
      <div>
        <label for="textarea" class="block text-sm font-medium">
          {textarea.label}
        </label>
        <textarea
          id="textarea"
          name="textarea"
          rows={textarea.rows ? textarea.rows : 4}
          placeholder={textarea.placeholder}
          required
          class="py-3 px-4 block w-full text-md rounded-lg border border-gray-200 bg-white "
        />
      </div>
    )
  }

  {
    disclaimer && (
      <div class="mt-3 flex items-start">
        <div class="flex mt-0.5">
          <input
            id="disclaimer"
            name="disclaimer"
            type="checkbox"
            required
            class="cursor-pointer mt-1 py-3 px-4 block w-full text-md rounded-lg border border-gray-200  bg-white "
          />
        </div>
        <div class="ml-3">
          <label for="disclaimer" class="cursor-pointer select-none text-sm text-gray-600">
            {disclaimer.label}
          </label>
        </div>
      </div>
    )
  }
  {
    description && (
      <div class="mt-3 text-center">
        <p class="text-sm text-gray-600">{description}</p>
      </div>
    )
  }
  {
    button && (
      <div class="mt-10 grid">
        <button type="submit" class="btn btn-primary cursor-pointer">
          {button}
        </button>
      </div>
    )
  }

  <div id="result" class="mt-3 text-center"></div>
</form>

<style>
  .invalid-feedback,
  .empty-feedback {
    display: none;
  }

  .was-validated :placeholder-shown:invalid ~ .empty-feedback {
    display: block;
  }

  .was-validated :not(:placeholder-shown):invalid ~ .invalid-feedback {
    display: block;
  }

  .is-invalid,
  .was-validated :invalid {
    border-color: #dc3545;
  }
</style>

<script is:inline>
  const form = document.getElementById('form');
  const result = document.getElementById('result');

  form.addEventListener('submit', function (e) {
    e.preventDefault();
    form.classList.add('was-validated');
    if (!form.checkValidity()) {
      form.querySelectorAll(':invalid')[0].focus();
      return;
    }
    const formData = new FormData(form);
    const object = Object.fromEntries(formData);
    const json = JSON.stringify(object);

    result.innerHTML = 'Sending...';

    fetch('https://api.web3forms.com/submit', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Accept: 'application/json',
      },
      body: json,
    })
      .then(async (response) => {
        let json = await response.json();
        if (response.status == 200) {
          result.classList.add('text-green-500');
          result.innerHTML = 'Message envoyé avec succès.';
        } else {
          console.log(response);
          result.classList.add('text-red-500');
          result.innerHTML = json.message;
        }
      })
      .catch((error) => {
        console.log(error);
        result.innerHTML = 'Something went wrong!';
      })
      .then(function () {
        form.reset();
        form.classList.remove('message envoyer');
        setTimeout(() => {
          result.style.display = 'none';
        }, 5000);
      });
  });
</script>
